buildscript {
    repositories {
        maven { url 'http://repo.maven.apache.org/maven2' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}
apply plugin: 'android-library'
apply plugin: 'maven'
repositories {
    maven { url 'http://files.couchbase.com/maven2/' }
    mavenLocal()
    mavenCentral()
}
// apply from: 'dependencies-archive.gradle'    // <- enable this when building an .aar
apply from: 'dependencies-test.gradle'       // <- enable this when testing
android {
    compileSdkVersion 19
    buildToolsVersion '19.0.2'
    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 19
    }
    productFlavors {
    }
    buildTypes {
    }
}
task createMavenDirectory(type: Exec) {

    ext {
        uploadUser = System.getenv("UPLOAD_USERNAME") + ":" + System.getenv("UPLOAD_PASSWORD")
        mkcolPath = System.getenv("UPLOAD_MAVEN_REPO_URL") + "com/couchbase/cblite/CBLiteEktorp/" + System.getenv("UPLOAD_VERSION_CBLITE_EKTORP") + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}
// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("UPLOAD_MAVEN_REPO_URL").contains("files") }
task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: System.getenv("UPLOAD_MAVEN_REPO_URL")) {
                authentication(userName: System.getenv("UPLOAD_USERNAME"), password: System.getenv("UPLOAD_PASSWORD"))
            }
            pom.version = System.getenv("UPLOAD_VERSION_CBLITE_EKTORP")  // eg, 0.7.2
            pom.groupId = 'com.couchbase.cblite'
            pom.artifactId = 'CBLiteEktorp'
            pom.project {
                licenses {
                    license {
                        name 'Couchbase Community Edition License Agreement'
                        url 'http://www.couchbase.com/agreement/community'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}
task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}

dependencies {
}